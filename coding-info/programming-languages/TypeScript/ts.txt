=> TypeScript este un limbaj de programare de nivel înalt gratuit și open-source dezvoltat de Microsoft, care adaugă tastare statică cu adnotări opționale la JavaScript.
=> TypeScript traduce codul scris in JavaScript si apoi il ruleaza (de aia se creeaza un nou fisier js cand rula ts)
=> Pentru a seta tsc ul am deschis tsconfig.json (un file care contine setarile tsc ului) si am setat:
    src este folderul in care se va cauta fisierul ts care trebuie rulat            // trebuie pus in root neaparat iar dam run la root nu la fisiere
    dist este folderul in care se vor pune fisierele js rezultate din complilare    // trebuie pus in root neaparat
    comentariile nu se vor pastra in codul js
    nu se va crea codul js daca apar erori

CUM SE CREEAZA UN FISIER TS:
1. fac un directory nou in care dau cd la acel directory

2. dupa dam run la comanda: tsc --init o sa ne apara un nou fisier cu setartile (tsconfig.json)

SETARILE STANDARD
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "ESNext",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    "rootDir": "./src",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "outDir": "./dist",                                   /* Specify an output folder for all emitted files. */
    "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  }
}

3. creem foldere src in care pun fisierele ts care trebuie rulate si dist in care se vor afla fisierele js

TYPES 
  => in js sunt urmatoarele tipuri de date: number string boolean null undefined object
  => ts adauga si tipurile: any unknown never enum tuple

VARIABILE
!anotarea este: let numar: number = 14 SAU let string: string = "BUNA"   
  => scopul lui tsc este de a folosi variabile de un tipuri diferite. acest lucru se poate face doar la declararea variabilei
  1. selectarea unui tip specific variabilei:
    let denumire: tipData = data;   // asa anotam o variabile la tipData
      SAU
    let denumire = data;            // asa se auto anoteaza la tipul de date al datei cu care initializam

  2. folosirea any                  // any este tipul care da voie variabilei sa stocheze toate tipurile de date
    let denumire;                   // daca nu am pus nici anotare si nici nu am initializat var cu o valoare, atunci tipul devine any chiar daca ulterior am initializat
    denumire = 5;

ARRAYURI
!anotarea se face 
let numbers: number[] = [];       // aici anotam orice element al arrayului cu number
  SAU
let numbers: [number, string, boolean] = [];  // aici anotam fiecare index al arrayului cu cate tip de date

ENUM
  => mi se pare useless

FUNCTII   
function calcul(nr1: number, denumire: string): number {    // daca vrem sa folosim tsc corect anotam fiecare parametru si functia. In cazul nostru functia returneaza neaparat un
  if (denumire == "approved")                                 numar. in cazul in care vrem sa nu returnam nimic folosim :void . Un alt lucru important este legat de setari. In cazul
    return number * 10;                                       setarilor de mai sus, sunt obligat sa nu folosesc variabile nefolosite sau parametrii nefolositi sau sa folosesc o logica
  else                                                        care permite in unele cazuri sa returneza tipuri ce nu corespund cu tipul functiei. In cazul in care unul dintre aceste 
    return number;                                            lucruri se intampla atunci se va genera o eroare
}

! daca vrem sa punem un parametru ca fiind optional atunci punem un '?' adica:  denumire?: string

OBIECTE
let obiect = {
  nume: "masina",   <=>   nume: string   (aceasta este cea mai favorabila definitie)
  numar: 15
} = {"BMW", 10}     // daca il initializam trebuie sa ii specificam fiecare caracteristica 

daca vrem sa facem o caracteristica optionala folosim: numar?: 15,

daca vrem sa facem o caracteristica constanta, nemodificabila punem un readonly inainte de denumire: readonly nume: string,

TYPE (este echivalentul lui struct din c++)

type dataStr = {
  readonly an: 2024,
  nume: string
}

UNION TYPES
let nrSauStr: number | string;      // ex union type

function numeFunctie(variabila: number | string): number {      // am adaugat o variabila care poate fii numar sau string
  // narrowing                    // aici o sa putem folosi doar functiile care pot fi apelate cu un numar sau cu un string
  if (variabila === 'number'){    // in acest if putem folosi toate functiile care pot fi apelate doar cu numere deoarece am folosit o logica care sa ne permita asta
    return 1;
  }
  else {                          // in else putem avea doar string asa ca ts ne permite sa folosim doar functii care pot fii apelate cu stringuri
    return 0;
  }
}

INTERSECTION TYPES
let nrSauStr: number & string;      // ex intersection type

un exemplu mai bun:

type mutabil = {
  muta = () => void
}

type scalabil = {
  scaleaza = () => void
}

type modificabil = mutabil & scalabil;      // noul tip contine toate caracteristicile din cele 2 tipuri secundare

let obiect: modificabil = {                 // aici trebuie sa respecte tipul modificabil asa ca punem toate carac din cele 2 tipuri secundare
  scaleaza = () => void
  muta = () => void
}

LITERAL TYPES
let numar: 50 = 80;         // acest tip ne da voie sa avem doar acel numar asociat cu variabila asa ca linia aceasta va furniza o eroare

let numar: 50 | 100;        // putem pune si | pentru a putea asocia acestei variabile 50 sau 100
  SAU
type cantitate = 50 | 100;
let numar: cantitate;       // poate fii 50 sau 100

alte ex:
type metric = 'cm' | 'm';

NULLABLE TYPES
null sau undefined nu sunt permise by default de catre ts.

ex:

function numeFunctie(number: number) {}   // nu putem pune ca parametru null sau undefined

pentru a puteam folosi null sau undefined

function numeFunctie(number: number | null | undefined) {}

OPTIONAL CHAINING

!! return id === 0 ? null : {console.log("else")};        // daca id === = atunci null altfel console.log("else");

daca am o functie care creeaza un obiect doar daca respecta niste cerinte, va returna null daca nu a respectat acele cerinte
pentru a nu da o eroare in cazul in care obiectul este null folosim

obiect?.check?.valoare    // daca obiectul nu este null sau undefined, daca check nu este null sau undefined, ia valoarea  <=> !== null && !== undefined
      // practic adauga un if care verifica daca obiectul este disponibil (atentie! trebuie sa fie construit astfel incat sa poata returna null sau undefined in cazurile nefavorabile)

ex:
let a: any = null;
log?.(a);   // nu va returna pt ca a = null

INTERFACE

interface este un fel de type dar care are niste modificari

  =>sintaxa type

type MyType = {
  property: string;
};


  =>sintaxa interface

interface MyInterface {
  property: string;
}

  => extinderea typeurilor

type ExtendedType = MyType & { newProperty: number };

  => extinderea interfaceurilor

interface ExtendedInterface extends MyInterface {         // extends este un fel de &
  newProperty: number;
}

class MyClass implements ExtendedInterface {
  property: string;
  newProperty: number;
}

  => la interface putem face si declarare multipla care adauga mai multe proprietati interfaceului principal

interface MyInterface {
  property: string;
}

interface MyInterface {
  newProperty: number;
}

// MyInterface are acum ambele proprietăți: property și newProperty


CLASE SI TIPURI 
Diferențe principale
Structură vs. Comportament:

Clase: Definirea atât a structurii (proprietăți) cât și a comportamentului (metode).
Tipuri: Definirea doar a structurii datelor (proprietăți).
Moștenire și Polimorfism:

Clase: Suportă moștenirea și polimorfismul, permițând reutilizarea și extinderea codului.
Tipuri: Pot fi extinse prin intersecții, dar nu suportă moștenirea comportamentală.
Instanțiere:

Clase: Pot fi instanțiate pentru a crea obiecte reale.
Tipuri: Nu pot fi instanțiate direct; sunt utilizate doar pentru verificarea tipurilor.
Verificare la compilare:

Ambele sunt folosite pentru a asigura corectitudinea tipurilor la compilare în TypeScript.
Constructor și Inițializare:

Clase: Au constructori pentru a inițializa proprietăți și pot avea logică în constructori.
Tipuri: Nu au constructori; doar definesc structura.


CLASE

class coder
{
  variabila!: string;         // ! ne permite sa nu initializam neaparat variabila asta, daca nu folosim acest semn, va trbui sa initializam neaparat in constructor

  constructor (private nume: string, private varsta: number, private lang: string = "TypeScript"){         // daca atribuim un visibility modifier la un parametru al constructorului se creeaza automat acea data in clasa
    this.nume = nume;               // asa initializam datele fara a le declara neaparat
    this.varsta = varsta;
  }       
}

const david = new coder("david", 17)    // al treilea parametru este implicit

class webDev extends coder
{
  constructor (public computer: string, nume: string, varsta: number)   // trebuie sa punem in parametrii si parametrii constructorului initial
  {
    super(nume, varsta);                // am preluat datele aste de la constructorul din clasa de baza
    this.computer = computer;           // am initializat o noua valoare
  }
}

class iduri
{
  static nrId: number;      // facem o variabila globala a clasei (var statica)

  public id: number;

  constructor() 
  {
    this.id = ++iduri.nrId;   // pentru a accesa nrId trebuie sa ne adresam clasei (this este pentru a se adresa obiectului numeClasa este pentru a se adresa clasei)
  }
}

console.log(iduri.nrId);      // putem accesa variabilele statice si inafara clasei folosind numele clasei


clasa persoana 
{
  private nume: string;
  private varsta: number;

  constructor(nume: string, varsta: number)
  {
    this.nume = nume;
    this.varsta = varsta;
  }

  public get Nume(nume: string)
  {
    this.nume = nume;
  }
  public set Nume()
  {
    return this.nume;
  }
}

let David = new persoana("david", 17);

console.log(David.nume);    // se va apela functia get

David.nume = "Victor";      // se va apela functia set deoarece contine acel = 