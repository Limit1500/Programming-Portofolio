Ce este un API?
API (Application Programming Interface) este un set de reguli și specificații care permit unui software să comunice cu alt software. Practic, un API este ca un intermediar care permite diferitelor aplicații să „vorbească” între ele.

Cum funcționează?
Gândește-te la un API ca la un meniu într-un restaurant. Meniul îți oferă o listă de preparate pe care le poți comanda. Când faci o comandă, chelnerul (care este API-ul) ia comanda ta și o transmite bucătarului (care este serverul). Bucătarul pregătește preparatul și chelnerul ți-l aduce înapoi.

În mod similar, API-ul primește cereri (comenzi) de la aplicația client, le trimite către server pentru a fi procesate, și apoi returnează rezultatul aplicației client.

Exemplu Sugestiv
Imagină-ți că ai o aplicație care afișează vremea. Pentru a obține informații despre vreme, aplicația ta trebuie să comunice cu un serviciu de prognoză meteo. Aici intervine API-ul.

Cererea: Aplicația ta trimite o cerere către API-ul unui serviciu meteo, de exemplu, „Vreau să știu temperatura în București”.

Procesare: API-ul serviciului meteo primește cererea, obține datele relevante de la baza de date și le pregătește.

Răspuns: API-ul trimite aceste date înapoi către aplicația ta, care apoi le afișează utilizatorului, de exemplu, „Temperatura în București este de 20°C”.





CUM SA CREEZI UN API CU TYPESCRIPT

1. prima oara iti pregatesti un directory in care poti sa iti creezi proiectul si navighezi cu cd acolo
2. initializezi npm init -y
3. creezi 2 foldere: dist si src (in dist sunt puse js urile care s au creat in urma rularii fisierelor ts iar in src punem fisierele ts inclusiv server.ts + alte resurse)
4. instalam modulele necesare:
	npm install express
	npm install typescript --save-dev
	npm install pg
  npm install cors
5. instalam alte module importa tipuri pentru fiecare modul in parte pentru a nu genera erori de la ts: 
	npm install --save-dev @types/pg
	npm install --save-dev @types/express
  npm install --save-dev @types/cors
6. adaugam alte setari pentru package.json
	"scripts": {
    	"test": "echo \"Error: no test specified\" && exit 1",
    	"build": "tsc",												// adaugam comanda build care da run la tsc conform fisierului tsconfig.json si adapteaza fisierele js din dist 
      "start": "node dist/server.js"        // da run la server prin fisierul din dist server.js care este copia lui server.ts
  	},

	+

	"type": "module",												// adaugam asta inafara oricarul obiectul fisierului package.json

7. initializezi rularea typescriptului prin comanda tsc --init si setezi fisierul tsconfig.json
{
  "compilerOptions": {
    "target": "ESNext",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "module": "NodeNext",                                /* Specify what module code is generated. */
    "rootDir": "./src",                                  /* Specify the root folder within your source files. */
    "moduleResolution": "NodeNext",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    "outDir": "./dist",                                   /* Specify an output folder for all emitted files. */
    "removeComments": true,                           /* Disable emitting comments. */
    "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
    "strict": true,                                      /* Enable all strict type-checking options. */
    "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules"]
}


PENTRU A DA RUN TREBUIE SA CONSTRUIM MAI INTAI FISIERELE JavaScript PRIN RULAREA COMENZII npm run build CARE DA RUN LA TOT TypeScript UL DIN PROIECT.
DUPA CE S AU FORMAT FISIERELE JavaScript, DAM RUN LA SERVER PRIN npm run start CARE RULEAZA FISIERUL DIN DIST server.js


## Structura

/api-project
│
├── /src
│   ├── /controllers
│   ├── /middlewares
│   ├── /models
│   ├── /routes
│   ├── /services
│   ├── app.js
│   └── server.js
├── /config
│   └── database.js
├── /tests
├── /utils
│   └── helperFunctions.js
├── .env
├── .gitignore
├── package.json
└── [README.md](http://readme.md/)

### Explicații suplimentare:

- **Controller** gestionează cererile și apelurile către servicii. practic apeleaza serviciile si verifica daca datele primite sunt corespunzatoare + aici nu este aceeasi menegeriere a erorilor deoarece aici primim erorile din tot parcursul requestului si trebuie sa le trimitem in res
- **Middleware** este folosit pentru funcții de pre-procesare, cum ar fi autentificarea.
- **Model** aici se pun queries urile + un try standardizat doar pt problemele de server
- **Routes** conectează endpointurile la controllere.
- **Service** conține logica de acces la date. + un try standardizat doar pt problemele de server
- **Config** gestionează conexiunile la baza de date și alte setări globale.
- **Testele** validează corectitudinea funcțiilor tale.
- **Utils** conține funcții auxiliare, generale pentru reutilizare.
- **app.ts** configureaza serverul cu elementele de care are nevoie ( app.use json / rutere / cors etc..)
- **server.ts** configureaza serverul care doar asculta portul si foloseste app ul configurat in app.ts
- **.env** contine toate variabilele de sistem ( port pg username password etc.. )

### Cursul complet al unui endpoint:

1. **Cererea este trimisă de client** la endpoint-ul `/users` (de exemplu, cu un `GET /users`).
2. **Serverul (`server.js`) ascultă cererea** și o direcționează către aplicația Express.
3. **Aplicația Express (`app.js`)** găsește ruta `/users` și o trimite către controller-ul definit în `userRoutes.js`.
4. **Controller-ul (`userController.js`)** primește cererea și apelează serviciul (`userService.js`) pentru a obține utilizatorii.
5. **Serviciul (`userService.js`)** apelează modelul (`userModel.js`) pentru a executa interogarea (query-ul) în baza de date.
6. **Modelul (`userModel.js`)** execută query-ul și obține utilizatorii din baza de date PostgreSQL.
7. **Rezultatul query-ului** este trimis înapoi prin lanț (de la model la service, apoi la controller).
8. **Controller-ul returnează răspunsul** către client, utilizând formatul din `helperFunctions.js`.

## Testare

### Cum funcționează testarea într-un API Express?

1. **Configurarea testelor:**
    - Poți folosi framework-uri de testare populare, cum ar fi **Mocha**, **Jest**, sau **Supertest** (pentru a testa cererile HTTP). Acestea îți oferă un mediu pentru a rula teste și pentru a verifica rezultatele.
2. **Simularea cererilor HTTP:**
    - Testele trimit cereri către rutele API-ului tău (GET, POST, PUT, DELETE) și verifică dacă răspunsul este corect în funcție de codul de status HTTP, structura JSON, sau alte aspecte.
3. **Mocking și Spies:**
    - În testarea unitară, se folosesc **mock-uri** pentru a simula funcționalitatea unor module externe (ex. baza de date sau API-uri externe), astfel încât să poți testa izolat funcționalitatea specifică.

## Securitate

## Ce cuprinde securitatea

- https (encriptarea requesturilor): se face automat nu trebuie sa fac nimic
- autentificarea clientului (aflam cine este clientul)
- autorizarea clientului (ii dam permisiunile necesare clientului dupa autentificare
- rate limits: pentru a nu primi spamuri care sa supraincarce serverul punem limite
- input validation: verificam daca inputul oferit de user este valid si nu poate sustrage informatii din baza de date sau poate crea alte atacuri

cookie, sesion storage vs local storage, 

### **Token JWT**

Un token JWT arată de obicei astfel:

```

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
```

- **Header**: Specifică algoritmul de semnare (de exemplu, HMAC SHA256).
- **Payload**: Conține informații despre utilizator și alte date relevante.
- **Semnătura**: este formata din hasharea headerului + payloadului + cheii (prin ea putem verifica daca datele tokenului au fost modificate

### Procesul de autentificare si autorizare

1. userul contacteaza serverul si se logheaza prin username / password / email
2. serverul creeaza un token specific utilizatorului
3. serverul ataseaza alaturi de orice urmator request facut de acel ip acest token prin cookie
4. la fiecare request urmator se valideaza tokenul astfel: prima oara il decodifica in header si payload. dupa asta il reconstruieste folosind cheia. daca noul token coincide cu tokenul transmis atunci este autorizat requestul.
- cum functioneaza: daca un atacator modifica payloadul sau headerul automat va trebui sa schimbe si semnatura deoarece aceasta devine invalida. aici intervine cheia. alt cineva inafara de server nu poate sa creeze o noua semnatura pt ca semnatura este valida daca contine cheia respectiva