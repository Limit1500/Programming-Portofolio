    => ce este postgresql: este un api care ne ofera posibilitatea de a ne crea o baza de date relationala. Acesta este cel
mai cunoscut si bun api de acest tip care foloseste limbaj SQL. el vine la pachet cu o aplicatie care ne ofera un GUI 
(grafical user interface) prin care putem administra si vizualiza baza de date creata de noi. de asemenea, aceasta baza de
date poate fi developata in visual studio code.

    => toate bazele de date stocheaza informatii in tabele care un linii (row) si coloane (column). De obicei pe linie se
afla id ul liniei iar pe coloane se afla datele specifice fiecarei linii.

    => cum ar trebui sa functioneze un proiect folosingd postgresql: prima oara se creeaza o baza de date folosind pg cli sau pg admin (recomand pg admin deoarece ai si un gui la dispozitie)
apoi se pot crea anumite tabele standard. revenim la node si creem un server folosind express. instalam pg si initializam obiectul pool oferit de pg (prin initializare, ne logam cu datele
noastre + selectam una dintre bazele de date). prin acest obiect putem da call la metoda query pentru a face modificari in baza de date folosind limbaj SQL

    => explicarea fisierelor din pgadmin: se foloseste un singur server, pentru fiecare proiect nou doar creez o nou baza de date. serverul are un port specific selectat. in folderul mare
server avem alte 3 foldere mari: databases group-roles si tablespaces. in principal majoritatea developmentului va fi in databases. ulterior o sa ma interesez si de group roles in cazul
in care vreau sa creez roluri pentru utilizatorii bazei mele de date. Tablespaces este ceva ce se ocupa de adresa in memorie la care se introduc aceste date. nu va trebui sa invat. 


PROGRAMAREA IN VISUAL STUDIO CODE:
        https://www.youtube.com/watch?v=zw4s3Ey8ayo

1. crearea de tabele
CREATE TABLE numeTabel(
    id SERIAL PRIMARY KEY,   // SERIAL = un int care se incrementeaza in functie de numarul liniei pe care se afla informatia, aceasta valoare este gestionata de postgresql; PRIMARY KEY = este principalul identificator pentru fiecare linie. De asemenea acesta este unic
    name VARCHAR(255),       // orice coloana se declara folosind numele si tipul de date. acest tip de date a fost creat pentru a nu fi introduse date random in tabel ci niste date care respecta niste cerinte    
    email VARCHAR(255),      // VARCHAR(nrCaractere) este un TEXT care are limita de lungime
    password TEXT,           // un text care nu are limite de lungime 
    age INT                  // un numar
);

!pt ca postgresql nu este case sensitive, nu poti pune denumiri care sunt keywords( ex: user table ...) asa ca denumirile care sunt si keywords sunt puse intre ghilimele "table"


2. inserarea in tabele
INSERT INTO numeTabel(email, name, password, age) VALUES ('david.tamsa999@gmail.com', 'David', 'myPassword', '17');  

structura: punem keyword urile INSERT INTO + nume tabel + ordinea in care initializam parametrii + VALUES + valoarea parametrilor

!single quotes nu sunt la fel ca double quotes: primele sunt pentru a introduce valori de tip string iar double sunt pentru denumiri
!daca numele era un keyword trebuia sa punem ghilimele "numeTabel"; nu am pus si id ul in lista de date pe care le introducem intr o linie deoarece este de tip SERIAL si valoarea este gestionata de postgresql


3. selectarea din tabele
SELECT * FROM numeTabel;                        // selecteaza toate liniile din tabel
SELECT name FROM numeTabel;                     // selecteaza toate numele din tabel
SELECT name, id FROM numeTabel;                 // selecteaza toate numele si id urile din tabel
SELECT * FROM numeTabel WHERE name = 'David';   // selecteaza toate liniile care au numele = 'David'
SELECT name FROM numeTabel WHERE age >= 18;     // selecteaza toate numele de pe liniile in care varsta este mai mare sau egala cu 18

! prin select se afiseaza in console postgresql ca un cout
! de asemenea dupa where putem crea conditii mai complexe folosind AND si OR + mai multe conditii


4. updatarea tabelelor
UPDATE numeTabel SET age = 30 WHERE id = 1;     // updateaza date in tabelul numeTabel: seteaza data age = 30 in coloanele in care id ul = 1


5. stergerea tabelelor / din tabele
DELETE FROM numeTabel;                          // asa stergem toate datele din tabel dar nu tabelul efectiv 
DELETE FROM numeTabel WHERE age < 18;           // sterge din tabel toate coloanele care au varsta mai mica decat 18
DROP TABLE numeTabel;                           // asa se sterge tabelul



RELATIONAREA TABELELOR
=> sunt 3 tipuri de relationare: 
    1. o coloana relationeaza cu o alta coloana (o data cu o alta data): prin relationare ne referim la crearea unei variabile in cadrul unei date adica in cadrul unei coloane
care are ca scop indicarea catre o alta data (de obicei se creeaza o coloana intr un tabel care are o varibile tabel2_id-ulDinTabel care indica faptul ca in tabelul 2, coloana
cu idul specificat are relevanta pentru coloana curenta)
    => cand este o relationare de tip one to one, aceasta legatura intre cele 2 date se poate face prin crearea unei variabile in coloana initiala dar si in coloana secundara 
prin care coloanele se indica una pe cealalta.
    2. o coloana relationeaza cu mai multe coloane (acest tip de relationare este cel mai des intalnit)
    => acest lucru se poate face prin crearea a 2 tabele: primul cu artisti iar al doilea cu toate piesele lor. Pentru a relationa artistul cu toate piesele lui,
se creeaza doar o variabila pentru fiecare piesa, care contie tabelul artistilor si id ul artistului careia ii apartine.
    3. mai multe coloane cu mai multe coloane: este ca si cum am folosi 2 relationari de tip one to many. un exemplu bun este un comentariu. acesta apartine
celui care l a scris si altuia care l a revizuit. Acest comentariu are 2 'parinti' si 2 variabile care indica din ce tabel fac parte parintii si id ul lor
    ! este important de retinut ca cele 2 date 'parinti' nu au legaturi in mod direct intre ele



SELECTAREA INFORMATIILOR ALATURI DE DATELE CU CARE AU RELATII
    SELECT * FROM 'user' JOIN post ON post.user_id = user.id;   // selecteaza tot din tabelul user combinat cu tabelul post cand in tabelul post id ul userului care l a creat este egal cu userul pe care il selectam
    => join inseamna ca afisam la comum din cele 2 tabele cand se respecta conditia de mai sus
    => sau aceast linie inseamna ca asociem si selectam impreuna datele cand conditia se respecta

!!! OUTPUTUL PENTRU ACEST TIP DE COMENZI ESTE UNUL STANDARD INSA POATE FII SCHIMBAT FOLOSIND AS KEYWORD. PENTRU MAI MULTE INFORMATIILOR
SA FOLOSESC CHAT GPT. (POT SA AFISEZ NISTE DATE SUB ALT NUME SAU POAT SA AFISEZ O PARTE DIN VARIABILELE CARE SUNT ATRIBUITE CELEI
DE A DOUA DATA ETC...)




EXEMPLU CONCRET DE BAZA DE DATE (datele nu sunt relevante):

CREATE TABLE "user"                         // creez o tabela pentru useri
(
	id SERIAL PRIMARY KEY,
	username VARCHAR(100),
	password VARCHAR(100)
);

CREATE TABLE post                           // creez o tabela pentru toate posturile userilor
(
	id SERIAL PRIMARY KEY,
	title VARCHAR(255),
	text TEXT,
	author_id INT,                          // salvam autorii posturilor
	video_id INT                            // salvam videoclipurile la care sunt postate 
)

CREATE TABLE video                          // creez o tabela pentru toate videoclipurile
(
	id SERIAL PRIMARY KEY,
	title VARCHAR(255),
	description TEXT,
	likes_number INT,
	dislikes_number INT,
	views_number INT,
    author_id INT                           // salvez id ul autorului
)

            // aici am creat un mod de a afisa odata cu un videoclip sau o postare sau un user toate legaturile pe care le au acestia cu celelalte tabele

SELECT                                      // am vrut sa afisez odata cu un user, toate comentariile sale si toate videoclipurile sale
    "user".id,                              // aici afisez lucrurile esentiale despre el
    "user".username,
    "user".password,
    post.title AS posted,                   // aici afisez doar titlul posturilor lui dar care sunt in coloana cu numele posted (schimb numele coloanei in care se pun titlurile)
    video.title AS created                  // analog videouri
FROM "user"                                 // selected din tabelul "user"
JOIN post ON post.author_id = "user".id     // la care da join si tabelul post cand post.author_id = "user".id
JOIN video ON video.author_id = "user".id   // la care da join si tabelul video cand video.author_id = "user".id
WHERE "user".id = 2;                        // selecteaza din tabelul user cand "user".id = 2;        

SELECT                                      // am vrut sa afisez odata cu videoclipurile si posturile si autorul sau
    video.id,                               // aici afisez lucrurile esentiale despre el
    video.title,
    video.description,
    "user".username AS author_username,     // afisez usernameul autorului la coloana author_username
    post.title AS post_title                // analog post
FROM video                                  // selected din tabelul video
JOIN post ON post.video_id = video.id       // la care da join si tabelul post cand post.video_id = video.id 
JOIN "user" ON video.author_id = "user".id
WHERE video.id = 1;

SELECT                                      // am vrut sa afisez odata cu postul, videoclipul la care este facut postul si autorul
    post.id,
    post.title,                             // in rest e ca sus
    post.text,
    "user".username AS author_username,
    video.title AS video_title
FROM post
JOIN "user" ON post.author_id = "user".id
JOIN video ON post.video_id = video.id
WHERE post.id = 1;

https://www.youtube.com/watch?v=l3rgdShkkfE





UTILIZAREA POSTGRES FOLOSIND EXPRESS

import express from "express";
import pkg from 'pg';
const { Pool } = pkg;

const app = express();
const PORT = 4200;
const pool = new Pool({
    user: 'postgres',
    host: 'localhost',
    database: 'postgres',
    password: 'D_QWERTY_T9',
    port: 5432
});

const checkDatabaseConnection = async () => {
    try {
        await pool.query('INSERT INTO comments (author_id, text) VALUES ($1, $2);', [2, '5432 works']); // Test query
        console.log("Database connected and test query executed successfully!");
    } catch (error) {
        console.error("Error connecting to the database:", error); // Log the full error object
    }
};

// Test the connection when the server starts
checkDatabaseConnection();

app.use(express.json());

app.listen(PORT, () => {
    console.log(`Listening on http://localhost:${PORT}/home`);
});
